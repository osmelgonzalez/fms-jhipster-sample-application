package com.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlayerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerAllPropertiesEquals(Player expected, Player actual) {
        assertPlayerAutoGeneratedPropertiesEquals(expected, actual);
        assertPlayerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerAllUpdatablePropertiesEquals(Player expected, Player actual) {
        assertPlayerUpdatableFieldsEquals(expected, actual);
        assertPlayerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerAutoGeneratedPropertiesEquals(Player expected, Player actual) {
        assertThat(actual)
            .as("Verify Player auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerUpdatableFieldsEquals(Player expected, Player actual) {
        assertThat(actual)
            .as("Verify Player relevant properties")
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getMiddleInitial()).as("check middleInitial").isEqualTo(expected.getMiddleInitial()))
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getDateOfBirth()).as("check dateOfBirth").isEqualTo(expected.getDateOfBirth()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerUpdatableRelationshipsEquals(Player expected, Player actual) {
        assertThat(actual)
            .as("Verify Player relationships")
            .satisfies(a -> assertThat(a.getGuardians()).as("check guardians").isEqualTo(expected.getGuardians()))
            .satisfies(a -> assertThat(a.getTeams()).as("check teams").isEqualTo(expected.getTeams()));
    }
}
